var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, LitElement, property, unsafeCSS } from 'lit-element';
import { unsafeHTML } from 'lit-html/directives/unsafe-html';
import { TestStatus } from 'mutation-testing-metrics';
import { highlightElement } from 'prismjs/components/prism-core';
import style from './test-file.scss';
import '../../style/prism-plugins';
import { bootstrap, prismjs } from '../../style';
import { determineLanguage, markTests } from '../../lib/code-helpers';
import { MutationTestReportTestComponent } from '../test/test.component';
import { getContextClassForTestStatus, getEmojiForTestStatus } from '../../lib/htmlHelpers';
import { MutationTestReportTestListItemComponent } from '../test-list-item/test-list-item.component';
let MutationTestReportTestFile = class MutationTestReportTestFile extends LitElement {
    constructor() {
        super(...arguments);
        this.filters = [];
        this.filtersChanged = (event) => {
            const enabledStates = event.detail.filter((filter) => filter.enabled).map((filter) => filter.status);
            this.forEachTestComponent((testComponent) => {
                testComponent.show = enabledStates.some((state) => { var _a; return ((_a = testComponent.test) === null || _a === void 0 ? void 0 : _a.status) === state; });
            });
        };
        this.handleTestSelected = (event) => {
            this.forEachTestComponent((testComponent) => {
                testComponent.active = testComponent.test === event.detail.test && event.detail.selected;
            });
        };
    }
    forEachTestComponent(action) {
        for (const testListItem of this.shadowRoot.querySelectorAll('mte-test-list-item')) {
            if (testListItem instanceof MutationTestReportTestListItemComponent) {
                action(testListItem);
            }
        }
        for (const testComponent of this.shadowRoot.querySelectorAll('mte-test')) {
            if (testComponent instanceof MutationTestReportTestComponent) {
                action(testComponent);
            }
        }
    }
    render() {
        return html `
      <div class="row" @test-selected="${this.handleTestSelected}">
        <div class="col-md-12">
          <mte-state-filter .filters="${this.filters}" @filters-changed="${this.filtersChanged}"></mte-state-filter>
          ${this.renderTestList()} ${this.renderCode()}
        </div>
      </div>
    `;
    }
    renderTestList() {
        var _a, _b, _c;
        const testsToRenderInTheList = ((_a = this.model) === null || _a === void 0 ? void 0 : _a.source) ? this.model.tests.filter((test) => !test.location) : (_c = (_b = this.model) === null || _b === void 0 ? void 0 : _b.tests) !== null && _c !== void 0 ? _c : [];
        if (testsToRenderInTheList.length) {
            return html `<div class="list-group">
        ${testsToRenderInTheList.map((test) => html `<mte-test-list-item @test-selected="${this.handleTestSelected}" .test="${test}"></mte-test-list-item>`)}
      </div>`;
        }
        return;
    }
    renderCode() {
        var _a;
        if ((_a = this.model) === null || _a === void 0 ? void 0 : _a.source) {
            return html `<pre id="report-code-block" class="line-numbers"><code class="language-${determineLanguage(this.model.name)}">${unsafeHTML(markTests(this.model.source, this.model.tests))}</code></pre>`;
        }
        return;
    }
    highlightCode() {
        var _a;
        const code = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('code');
        if (code) {
            highlightElement(code);
            // Prism-js's `highlightElement` creates a copy of the DOM tree to do its magic.
            // Now that the code is highlighted, we can bind the test components
            this.forEachTestComponent((testComponent) => {
                var _a;
                testComponent.test = (_a = this.model) === null || _a === void 0 ? void 0 : _a.tests.find((test) => test.id === testComponent.getAttribute('test-id'));
            });
        }
    }
    updated(changes) {
        if (changes.has('model') && this.model) {
            const model = this.model;
            this.filters = [TestStatus.Killing, TestStatus.Covering, TestStatus.NotCovering]
                .filter((status) => model.tests.some((test) => test.status === status))
                .map((status) => ({
                enabled: true,
                count: model.tests.filter((m) => m.status === status).length,
                status,
                label: `${getEmojiForTestStatus(status)} ${status}`,
                context: getContextClassForTestStatus(status),
            }));
            this.highlightCode();
        }
    }
};
MutationTestReportTestFile.styles = [prismjs, bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportTestFile.prototype, "model", void 0);
__decorate([
    property()
], MutationTestReportTestFile.prototype, "filters", void 0);
MutationTestReportTestFile = __decorate([
    customElement('mte-test-file')
], MutationTestReportTestFile);
export { MutationTestReportTestFile };
//# sourceMappingURL=test-file.component.js.map
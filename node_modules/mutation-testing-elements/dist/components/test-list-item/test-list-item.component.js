var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, customElement, property, html, unsafeCSS } from 'lit-element';
import { createCustomEvent } from '../../lib/custom-events';
import { getEmojiForTestStatus } from '../../lib/htmlHelpers';
import { bootstrap } from '../../style';
import style from './test-list-item.scss';
let MutationTestReportTestListItemComponent = class MutationTestReportTestListItemComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.active = false;
        this.show = true;
        this.dispatchTestSelected = (event) => {
            event.stopPropagation();
            this.active = !this.active;
            this.dispatchEvent(createCustomEvent('test-selected', { test: this.test, selected: this.active }, { bubbles: true, composed: true }));
        };
    }
    render() {
        return this.show
            ? html `<button type="button" @click="${this.dispatchTestSelected}" class="list-group-item list-group-item-action${this.active ? ' active' : ''}"
          ><span class="emblem">${getEmojiForTestStatus(this.test.status)}</span> ${this.test.name}${this.test.location
                ? html ` (${this.test.location.start.line}:${this.test.location.start.column})`
                : ''}
          [${this.test.status}]</button
        >`
            : '';
    }
};
MutationTestReportTestListItemComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportTestListItemComponent.prototype, "test", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], MutationTestReportTestListItemComponent.prototype, "active", void 0);
__decorate([
    property({ type: Boolean })
], MutationTestReportTestListItemComponent.prototype, "show", void 0);
MutationTestReportTestListItemComponent = __decorate([
    customElement('mte-test-list-item')
], MutationTestReportTestListItemComponent);
export { MutationTestReportTestListItemComponent };
//# sourceMappingURL=test-list-item.component.js.map
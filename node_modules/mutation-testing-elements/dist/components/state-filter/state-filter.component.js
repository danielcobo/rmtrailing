var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, LitElement, property, html, unsafeCSS } from 'lit-element';
import { bootstrap } from '../../style';
import style from './state-filter.scss';
import { createCustomEvent } from '../../lib/custom-events';
import { repeat } from 'lit-html/directives/repeat';
let MutationTestReportFileStateFilterComponent = class MutationTestReportFileStateFilterComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.collapsed = true;
        this.allowToggleAll = false;
        this.toggleOpenAll = () => {
            this.collapsed = !this.collapsed;
            if (this.collapsed) {
                this.dispatchEvent(createCustomEvent('collapse-all', undefined));
            }
            else {
                this.dispatchEvent(createCustomEvent('expand-all', undefined));
            }
        };
    }
    get collapseButtonText() {
        if (this.collapsed) {
            return 'Expand all';
        }
        else {
            return 'Collapse all';
        }
    }
    updated(changedProperties) {
        if (changedProperties.has('filters')) {
            this.dispatchFiltersChangedEvent();
        }
    }
    checkboxChanged(filter, enabled) {
        filter.enabled = enabled;
        this.dispatchFiltersChangedEvent();
    }
    dispatchFiltersChangedEvent() {
        this.dispatchEvent(createCustomEvent('filters-changed', this.filters));
    }
    render() {
        return html `
      <div class="legend col-md-12 d-flex align-items-center">
        ${this.filters &&
            repeat(this.filters, 
            // Key function. I super duper want that all properties are weighed here,
            // see https://lit-html.polymer-project.org/guide/writing-templates#repeating-templates-with-the-repeat-directive
            (filter) => JSON.stringify(filter), (filter) => html `<div data-status="${filter.status}" class="form-check form-check-inline">
            <label class="form-check-label">
              <input
                class="form-check-input"
                type="checkbox"
                ?checked="${filter.enabled}"
                value="${filter.status}"
                @input="${(el) => this.checkboxChanged(filter, el.target.checked)}"
              />
              <span class="badge bg-${filter.context}">${filter.label} (${filter.count})</span>
            </label>
          </div>`)}
        ${this.allowToggleAll
            ? html `<button @click="${this.toggleOpenAll}" class="btn btn-sm btn-secondary" type="button">${this.collapseButtonText}</button>`
            : ''}
      </div>
    `;
    }
};
MutationTestReportFileStateFilterComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportFileStateFilterComponent.prototype, "collapseButtonText", null);
__decorate([
    property()
], MutationTestReportFileStateFilterComponent.prototype, "collapsed", void 0);
__decorate([
    property({ type: Array })
], MutationTestReportFileStateFilterComponent.prototype, "filters", void 0);
__decorate([
    property({ type: Boolean, attribute: 'allow-toggle-all', reflect: true })
], MutationTestReportFileStateFilterComponent.prototype, "allowToggleAll", void 0);
MutationTestReportFileStateFilterComponent = __decorate([
    customElement('mte-state-filter')
], MutationTestReportFileStateFilterComponent);
export { MutationTestReportFileStateFilterComponent };
//# sourceMappingURL=state-filter.component.js.map
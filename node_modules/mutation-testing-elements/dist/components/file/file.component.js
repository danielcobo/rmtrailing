var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html, property, customElement, unsafeCSS } from 'lit-element';
import { unsafeHTML } from 'lit-html/directives/unsafe-html';
import { MutationTestReportMutantComponent } from '../mutant/mutant.component';
import { bootstrap, prismjs } from '../../style';
import { markMutants } from '../../lib/code-helpers';
import { MutantStatus } from 'mutation-testing-report-schema/api';
import { highlightElement } from 'prismjs/components/prism-core';
import style from './file.scss';
import { getContextClassForStatus, getEmojiForStatus } from '../../lib/htmlHelpers';
let MutationTestReportFileComponent = class MutationTestReportFileComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.filters = [];
        this.expandAll = () => {
            this.forEachMutantComponent((mutantComponent) => (mutantComponent.expand = true));
        };
        this.collapseAll = () => {
            this.forEachMutantComponent((mutantComponent) => (mutantComponent.expand = false));
        };
        this.filtersChanged = (event) => {
            const enabledMutantStates = event.detail.filter((mutantFilter) => mutantFilter.enabled).map((mutantFilter) => mutantFilter.status);
            this.forEachMutantComponent((mutantComponent) => {
                mutantComponent.show = enabledMutantStates.some((state) => mutantComponent.mutant !== undefined && mutantComponent.mutant.status === state);
            });
        };
    }
    forEachMutantComponent(action) {
        for (const mutantComponent of this.shadowRoot.querySelectorAll('mte-mutant')) {
            if (mutantComponent instanceof MutationTestReportMutantComponent) {
                action(mutantComponent);
            }
        }
    }
    render() {
        return html `
      <div class="row">
        <div class="col-md-12">
          <mte-state-filter
            allow-toggle-all
            .filters="${this.filters}"
            @filters-changed="${this.filtersChanged}"
            @expand-all="${this.expandAll}"
            @collapse-all="${this.collapseAll}"
          ></mte-state-filter>
          <pre id="report-code-block" class="line-numbers"><code class="language-${this.model.language}">${unsafeHTML(markMutants(this.model))}</code></pre>
        </div>
      </div>
    `;
    }
    firstUpdated() {
        const code = this.shadowRoot.querySelector('code');
        if (code) {
            highlightElement(code);
            // Prism-js's `highlightElement` creates a copy of the DOM tree to do its magic.
            // Now that the code is highlighted, we can bind the mutants
            this.forEachMutantComponent((mutantComponent) => {
                mutantComponent.mutant = this.model.mutants.find((mutant) => mutant.id === mutantComponent.getAttribute('mutant-id'));
            });
        }
    }
    updated(changes) {
        if (changes.has('model') && this.model) {
            this.filters = [
                MutantStatus.Killed,
                MutantStatus.Survived,
                MutantStatus.NoCoverage,
                MutantStatus.Ignored,
                MutantStatus.Timeout,
                MutantStatus.CompileError,
                MutantStatus.RuntimeError,
            ]
                .filter((status) => this.model.mutants.some((mutant) => mutant.status === status))
                .map((status) => ({
                enabled: [MutantStatus.Survived, MutantStatus.NoCoverage, MutantStatus.Timeout].includes(status),
                count: this.model.mutants.filter((m) => m.status === status).length,
                status,
                label: `${getEmojiForStatus(status)} ${status}`,
                context: getContextClassForStatus(status),
            }));
        }
    }
};
MutationTestReportFileComponent.styles = [prismjs, bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportFileComponent.prototype, "filters", void 0);
__decorate([
    property()
], MutationTestReportFileComponent.prototype, "model", void 0);
MutationTestReportFileComponent = __decorate([
    customElement('mte-file')
], MutationTestReportFileComponent);
export { MutationTestReportFileComponent };
//# sourceMappingURL=file.component.js.map
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, LitElement, property, html, unsafeCSS } from 'lit-element';
import { bootstrap } from '../../style';
import { getContextClassForStatus } from '../../lib/htmlHelpers';
import style from './mutant.scss';
import { createCustomEvent } from '../../lib/custom-events';
let MutationTestReportMutantComponent = class MutationTestReportMutantComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.show = true;
        this.expand = false;
        this.mutantClicked = (event) => {
            this.expand = !this.expand;
            event.stopPropagation();
            this.dispatchEvent(createCustomEvent('mutant-selected', { selected: this.expand, mutant: this.mutant }, { bubbles: true, composed: true }));
        };
    }
    render() {
        // This part is newline significant, as it is rendered in a <code> block.
        // No unnecessary new lines
        return html `${this.renderButton()}${this.renderCode()}`;
    }
    renderButton() {
        if (this.show && this.mutant) {
            return html `<span
        class="mutant-toggle badge bg-${this.expand ? 'info' : getContextClassForStatus(this.mutant.status)}"
        @click="${this.mutantClicked}"
        title="${this.mutant.mutatorName}"
        >${this.mutant.id}</span
      >`;
        }
        return undefined;
    }
    renderCode() {
        return html `${this.renderReplacement()}${this.renderActual()}`;
    }
    renderActual() {
        const actualCodeSlot = html `<slot></slot>`;
        return html `<span class="original-code ${this.expand && this.show ? 'disabled-code' : ''}">${actualCodeSlot}</span>`;
    }
    renderReplacement() {
        if (this.mutant) {
            return html `<span class="replacement badge bg-info" @click="${this.mutantClicked}" ?hidden="${!this.expand || !this.show}"
        >${this.mutant.replacement || this.mutant.mutatorName}</span
      >`;
        }
        return undefined;
    }
};
MutationTestReportMutantComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportMutantComponent.prototype, "mutant", void 0);
__decorate([
    property()
], MutationTestReportMutantComponent.prototype, "show", void 0);
__decorate([
    property()
], MutationTestReportMutantComponent.prototype, "expand", void 0);
MutationTestReportMutantComponent = __decorate([
    customElement('mte-mutant')
], MutationTestReportMutantComponent);
export { MutationTestReportMutantComponent };
//# sourceMappingURL=mutant.component.js.map
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, LitElement, property, unsafeCSS } from 'lit-element';
import { nothing } from 'lit-html';
import { getContextClassForTestStatus } from '../../lib/htmlHelpers';
import style from './test.scss';
import { bootstrap } from '../../style';
import { createCustomEvent } from '../../lib/custom-events';
let MutationTestReportTestComponent = class MutationTestReportTestComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.active = false;
        this.show = true;
        this.testClicked = (event) => {
            this.active = !this.active;
            event.stopPropagation();
            this.dispatchTestSelected();
        };
    }
    dispatchTestSelected() {
        this.dispatchEvent(createCustomEvent('test-selected', { selected: this.active, test: this.test }, { bubbles: true, composed: true }));
    }
    render() {
        // This part is newline significant, as it is rendered in a <code> block.
        // No unnecessary new lines
        return this.test && this.show
            ? html `<span class="badge bg-${this.active ? 'info' : getContextClassForTestStatus(this.test.status)}" @click="${this.testClicked}"
          >${this.test.id}</span
        >`
            : nothing;
    }
};
MutationTestReportTestComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportTestComponent.prototype, "test", void 0);
__decorate([
    property()
], MutationTestReportTestComponent.prototype, "active", void 0);
__decorate([
    property()
], MutationTestReportTestComponent.prototype, "show", void 0);
MutationTestReportTestComponent = __decorate([
    customElement('mte-test')
], MutationTestReportTestComponent);
export { MutationTestReportTestComponent };
//# sourceMappingURL=test.component.js.map